Header = C68 COMPILATION SYSTEM AS68 Assembler Contents = 
NAME
AS68 - assembler for use with C68 system
SYNOPSIS 
AS68 [options] input_file output_file
DESCRIPTION
The assembler used by the C68 system is a derivative of the "Sozobon" public domain JAS assembler. It has been ported to QDOS and modified to produce SROFF output.
The JAS assembler was designed for compatibility with the Alcyon assembler. It, and thus AS68, do not provide many features the assembly language programmer might want. AS68 is intended more for use by a compiler front-end. AS68 generally produces smaller code than the Alcyon assembler because it is smarter about generating short branch instructions. Also, AS68 uses no temporary files and runs quite a bit faster than Alcyon. 
Some of the command line options are accepted for compatibility with the Alcyon assembler, but are actually ignored. The following command line options are supported: 
=Set the stack space. This should not be needed with C68 Release 2.00 or later.
%Set the heap space. This should not be needed with C68 Release 2.00 or later.
-NDo not generate short branch instructions.  
-VPrint a version message.  
-lIgnored 
-uIgnored 
-s dirIgnored.  
-Ln By default, no local symbols are placed in the symbol table of the output. This option instructs AS68 to put all symbols into the symbol table if nis 2 or greater. If the option -L1is given, symbols whose name does not start with 'L' (ie internal labels generated by the compiler) are written to the symbol table.  
DIRECTIVES 
The following is a list of the directives supported by the assembler. This version of the assembler is compatible with source intended for the Alycon Assembler, and also for the MINIX ACK assembler. Many of the directives therefore exist in two forms.
.align n  Position on an boundary that is a multiple of n. Typically used to round to multiples of 2 or 4.
.ascii Define a series of ASCII string (not zero terminated)
.asciz Define a zero terminated ASCII string.
.bss Start the BSS section
.comm  Start of a common section
.data Start the DATA section. Equivalent to ".sect data"
.dc.n Define data elements. The size of the elements is determined by the value of 'n' which can be 'b' for bytes, 'w' for words or 'l' for long words.
.data1 Equivalent to dc.b
.data2 Equivalent to dc.w
.data4  Equivalent to dc.l
.ds.n m Define unitialised space. The size of the data elements is defined by 'n' which can be b for bytes, s for words or l for longs. The number of elements of this type is defined by m.
.define  Make the name globally visible outside this module (ie. and XDEF).
.end
.equ
.even Ensure next instruction is on an even memory address.
.extern  Assume the name is an external name in another module (ie. an XREF).
.globl Make the name globally visible (ie. an XDEF).
.org 
.rom 
.sectsection Start the specified section 
.space n Equivalent to ds.b n
.text Start the TEXT section
Comments can be included by preceding them with either the semi-colon or the exclamation mark sysmbols. If they start in column 1, then asterisk is also accepted.
Hex numbers can be written in either of the following forms:
$00 Normal assembler style
0x00 C style
KNOWN BUGS
1. The assembler will (now) accept operands of the form label-label. However incorrect code will be generated if both operands are not in the same source file, and both in the same segement. No warning or error message is given.
This is due to the fact that this capability was added as a "quick hack" for use by C68 rather than by humans. If anyone does the work to make the support more generic and remove the above restrictions, then please pass the results to D.J.Walker.
CHANGE HISTORY 
The following is the change history of this document (not AS68 itself). It is intended to help users who are upgrading to identify the changes that have occurred.
01 Jun 94 DJW - A section added on the fact that label-label constructs are now supported in a limited fashion.
 Footer = AS68_DOC LAST CHANGED: 12 Sep 94 AS68: nnn